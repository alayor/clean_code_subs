1
00:00:09,248 --> 00:00:11,699


2
00:00:11,699 --> 00:00:13,467
- Hola, soy Amanda.

3
00:00:13,467 --> 00:00:14,792
- Hola, soy Elizabeth.

4
00:00:14,792 --> 00:00:16,413
- Hola, soy Alexis.

5
00:00:16,413 --> 00:00:18,205
- Hi, soy Mufa.

6
00:00:18,205 --> 00:00:19,246
- Bienvenidos.
- A otro.

7
00:00:19,246 --> 00:00:20,079
- Episodio.

8
00:00:20,079 --> 00:00:21,037
- Episodio de.

9
00:00:21,037 --> 00:00:22,360
- Clean code.

10
00:00:22,360 --> 00:00:23,875
- Clean code.

11
00:00:23,875 --> 00:00:25,173
- Clean code.
- Clean code.

12
00:00:25,173 --> 00:00:27,073
- Vamos a emprender un viaje.

13
00:00:27,073 --> 00:00:28,663
- Para emprender un viaje de ...

14
00:00:28,663 --> 00:00:29,496
- En este episodio.

15
00:00:29,496 --> 00:00:30,329
- Episodio.

16
00:00:31,663 --> 00:00:33,281
- Wuujuu!.

17
00:00:33,281 --> 00:00:34,114
- Por Uncle Bob.

18
00:00:34,114 --> 00:00:35,781
- Uncle Bob.

19
00:00:36,792 --> 00:00:37,879
- Disfruten!

20
00:00:37,879 --> 00:00:40,796


21
00:00:44,139 --> 00:00:47,317


22
00:00:47,317 --> 00:00:49,984


23
00:00:51,624 --> 00:00:54,207


24
00:00:59,061 --> 00:01:02,051
- Bienvenidos, bienvenidos a la nueva versión

25
00:01:02,051 --> 00:01:05,011
del episodio uno de Clean Code.

26
00:01:05,011 --> 00:01:06,761
Permíteme tomar tu sombrero.

27
00:01:08,586 --> 00:01:10,965
Entonces, han pasado dos años y medio

28
00:01:10,965 --> 00:01:14,224
desde que escribí y produje
ese primer episodio.

29
00:01:14,224 --> 00:01:17,645
Y ahora con 20 episodios en nuestro haber,

30
00:01:17,645 --> 00:01:20,685
pensamos que era hora de
resaltar ese viejo primer episodio

31
00:01:20,685 --> 00:01:23,555
y llevarlo a nuestros
estándares actuales de

32
00:01:23,555 --> 00:01:27,445
scripting, video, y edición de audio.

33
00:01:27,445 --> 00:01:30,176
After all, this is the first
episode that many people

34
00:01:30,176 --> 00:01:32,115
are going to see, and we think that

35
00:01:32,115 --> 00:01:33,925
first impressions are important,

36
00:01:33,925 --> 00:01:36,565
so we refactored the whole thing.

37
00:01:36,565 --> 00:01:38,528
And so, without further ado,

38
00:01:38,528 --> 00:01:42,695
here is the newer, cleaner
episode one, Clean Code.

39
00:01:44,176 --> 00:01:47,088
(beeping sounds)

40
00:01:47,088 --> 00:01:49,755
(keys clicking)

41
00:01:52,645 --> 00:01:56,812
In 1908, Henrietta Swan
Leavitt, an Astronomer working

42
00:01:57,741 --> 00:02:00,963
at Harvard, made an incredible discovery,

43
00:02:00,963 --> 00:02:04,296
one that would change astronomy forever.

44
00:02:05,253 --> 00:02:09,011
Astrophotography was just
coming into its heyday.

45
00:02:09,011 --> 00:02:12,229
Astronomers were producing
so many photographic plates

46
00:02:12,229 --> 00:02:15,789
that they didn't have
time to analyze them all.

47
00:02:15,789 --> 00:02:18,829
Back then, women were not
allowed to operate the

48
00:02:18,829 --> 00:02:22,456
telescopes, but they were
deemed capable of making

49
00:02:22,456 --> 00:02:24,496
measurements on photographic plates

50
00:02:24,496 --> 00:02:28,663
and doing calculations
based on those measurements.

51
00:02:29,616 --> 00:02:32,317
Leavitt, who initially worked for no pay

52
00:02:32,317 --> 00:02:35,016
and was later paid 30 cents an hour,

53
00:02:35,016 --> 00:02:38,317
was asked by her boss, Edward Pickering,

54
00:02:38,317 --> 00:02:41,165
to study and measure variable stars,

55
00:02:41,165 --> 00:02:44,915
stars that change their
brightness over time.

56
00:02:46,475 --> 00:02:49,808
Finding and studying variable stars using

57
00:02:49,808 --> 00:02:53,459
photographic plates is not an easy task.

58
00:02:53,459 --> 00:02:55,808
You begin with one photographic plate

59
00:02:55,808 --> 00:02:59,059
that has hundreds and
hundreds of stars on it,

60
00:02:59,059 --> 00:03:03,027
and then you measure each
individual star's brightness

61
00:03:03,027 --> 00:03:06,587
by measuring the diameter of the spot

62
00:03:06,587 --> 00:03:08,387
on the photographic plate.

63
00:03:08,387 --> 00:03:11,979
And you do this for
every star on the plate.

64
00:03:11,979 --> 00:03:14,576
And then you get another
photographic plate

65
00:03:14,576 --> 00:03:18,277
from the same part of the sky
taken at a different time,

66
00:03:18,277 --> 00:03:20,704
and you do all those measurements again,

67
00:03:20,704 --> 00:03:23,323
and you correlate them, looking for stars

68
00:03:23,323 --> 00:03:25,440
that changed in brightness.

69
00:03:25,440 --> 00:03:28,960
And then you do that
again and again and again

70
00:03:28,960 --> 00:03:31,440
for hundreds and hundreds of plates

71
00:03:31,440 --> 00:03:33,190
over years and years.

72
00:03:36,101 --> 00:03:38,629
In Leavitt's case, it was the 20 years

73
00:03:38,629 --> 00:03:40,462
between 1893 and 1912.

74
00:03:42,309 --> 00:03:44,421
And in those fateful decades,

75
00:03:44,421 --> 00:03:47,941
she made one of the most
amazingly useful discoveries

76
00:03:47,941 --> 00:03:50,274
in the history of astronomy.

77
00:03:51,768 --> 00:03:54,856
You see, she noticed something peculiar

78
00:03:54,856 --> 00:03:57,397
about the magellanic clouds.

79
00:03:57,397 --> 00:04:00,027
Now these clouds, to
the naked eye, are just

80
00:04:00,027 --> 00:04:03,907
patches of fuzz on the
Southern hemisphere sky,

81
00:04:03,907 --> 00:04:07,656
but on a photographic plate
taken through a telescope,

82
00:04:07,656 --> 00:04:11,823
they are clouds of millions
upon millions of stars.

83
00:04:13,907 --> 00:04:17,717
What Leavitt noticed was
that thousands of those stars

84
00:04:17,717 --> 00:04:21,176
in the magellanic clouds
were variable stars,

85
00:04:21,176 --> 00:04:24,093
their brightness changed over time.

86
00:04:25,456 --> 00:04:28,248
Now there's a certain
kind of variable star

87
00:04:28,248 --> 00:04:30,645
called a cepheid variable.

88
00:04:30,645 --> 00:04:34,645
And cepheid variables pulsate
with very regular rhythms.

89
00:04:34,645 --> 00:04:37,392
Some of them pulsate
once in a couple of days,

90
00:04:37,392 --> 00:04:40,528
others will pulsate once
in a couple of weeks.

91
00:04:40,528 --> 00:04:44,747
Why they pulsate will be a
topic of another episode.

92
00:04:44,747 --> 00:04:48,787
Leavitt found many such cepheid variables

93
00:04:48,787 --> 00:04:50,416
in the magellanic clouds,

94
00:04:50,416 --> 00:04:53,166
all pulsating at different rates.

95
00:04:54,317 --> 00:04:58,717
But then she noticed something
that wasn't true elsewhere.

96
00:04:58,717 --> 00:05:02,440
The brighter cepheid variables
in the magellanic clouds

97
00:05:02,440 --> 00:05:06,392
pulsated more slowly than the dimmer ones.

98
00:05:06,392 --> 00:05:09,285
Why would this be true
of the magellanic clouds

99
00:05:09,285 --> 00:05:11,702
but not elsewhere in the sky?

100
00:05:13,312 --> 00:05:16,133
But then it occurred to her.

101
00:05:16,133 --> 00:05:19,893
What if all the stars
in the magellanic cloud

102
00:05:19,893 --> 00:05:23,872
were roughly the same distance from us?

103
00:05:23,872 --> 00:05:26,965
If that was true, then
the rate at which the

104
00:05:26,965 --> 00:05:29,773
cepheid variables pulsated was related

105
00:05:29,773 --> 00:05:32,023
to their actual brightness.

106
00:05:34,123 --> 00:05:37,933
She did the math and came up
with a simple and beautiful

107
00:05:37,933 --> 00:05:42,541
formula called the period
luminosity relationship.

108
00:05:42,541 --> 00:05:46,413
Given the period of a star
in the magellanic clouds,

109
00:05:46,413 --> 00:05:49,621
using this formula, she
could predict luminosity,

110
00:05:49,621 --> 00:05:54,013
or given the luminosity of a
star in the magellanic clouds,

111
00:05:54,013 --> 00:05:58,013
she could use the formula
to predict the period.

112
00:05:59,381 --> 00:06:02,021
Now, maybe you're wondering
why this was so useful,

113
00:06:02,021 --> 00:06:04,517
but let me tell you, it's really useful.

114
00:06:04,517 --> 00:06:08,048
And the reason is that if
you can measure the distance

115
00:06:08,048 --> 00:06:12,408
to just one cepheid variable
star, one that's nearby,

116
00:06:12,408 --> 00:06:15,747
then you can calibrate
Leavitt's formula to tell you

117
00:06:15,747 --> 00:06:18,395
where any cepheid variable star is.

118
00:06:18,395 --> 00:06:21,475
So long as you can measure
its period and luminosity,

119
00:06:21,475 --> 00:06:24,058
you can calculate its distance.

120
00:06:25,664 --> 00:06:28,453
Needless to say, the hunt was on.

121
00:06:28,453 --> 00:06:31,229
And it was just a year
later that Ejnar Hertzsprung

122
00:06:31,229 --> 00:06:35,117
measured the distance to
several cepheid variable stars.

123
00:06:35,117 --> 00:06:38,579
Using those numbers, Leavitt's
formula was calibrated

124
00:06:38,579 --> 00:06:41,496
such that it could tell
you the distance to any

125
00:06:41,496 --> 00:06:44,576
cepheid variable if you could measure its

126
00:06:44,576 --> 00:06:47,409
period and its average luminosity.

127
00:06:48,656 --> 00:06:50,616
Let me repeat that.

128
00:06:50,616 --> 00:06:53,448
We could now accurately
determine the distance

129
00:06:53,448 --> 00:06:57,917
to any object that contained
a cepheid variable.

130
00:06:57,917 --> 00:07:00,837
What objects contain cepheid variables?

131
00:07:00,837 --> 00:07:03,504
Oh, globular clusters, galaxies,

132
00:07:04,997 --> 00:07:07,914
but that's a topic for another day.

133
00:07:09,235 --> 00:07:13,187
For now, just remember that
the measuring stick we use

134
00:07:13,187 --> 00:07:17,885
to measure the universe
itself was the result of

135
00:07:17,885 --> 00:07:21,645
the careful and dedicated
efforts of one remarkable woman,

136
00:07:21,645 --> 00:07:23,562
Henrietta Swan Leavitt.

137
00:07:24,453 --> 00:07:27,685
(beeping sounds)

138
00:07:27,685 --> 00:07:30,352
(keys clicking)

139
00:07:32,915 --> 00:07:36,741
In 2008, Kent Beck wrote
this wonderful book,

140
00:07:36,741 --> 00:07:38,611
Implementation Patterns.

141
00:07:38,611 --> 00:07:42,027
It's full of tips and techniques
that programmers can use

142
00:07:42,027 --> 00:07:46,229
to keep their code nicely
structured and well ordered.

143
00:07:46,229 --> 00:07:48,789
But he began this book
with what I consider

144
00:07:48,789 --> 00:07:51,379
to be a striking statement.

145
00:07:51,379 --> 00:07:55,592
He said, "Actually, this
book is built on a rather

146
00:07:55,592 --> 00:07:59,009
"fragile premise that good code matters."

147
00:08:02,155 --> 00:08:03,738
- Fragile? Fragile?

148
00:08:04,856 --> 00:08:06,395
I don't see anything fragile

149
00:08:06,395 --> 00:08:08,592
about the fact that good code matters,

150
00:08:08,592 --> 00:08:09,939
of course it matters!

151
00:08:09,939 --> 00:08:12,275
What nonsense to think otherwise.

152
00:08:12,275 --> 00:08:13,108
Hmph!

153
00:08:15,163 --> 00:08:18,624
- Of course, as the author
of this book, Clean Code,

154
00:08:18,624 --> 00:08:22,124
I have to agree, clean code matters a lot.

155
00:08:24,621 --> 00:08:27,381
- Indeed, clean code
can make the difference

156
00:08:27,381 --> 00:08:30,531
between the ultimate success or failure

157
00:08:30,531 --> 00:08:31,864
of your company.

158
00:08:33,445 --> 00:08:36,227
- I've experienced this quite directly.

159
00:08:36,227 --> 00:08:39,387
Here, let me tell you this story of

160
00:08:39,387 --> 00:08:41,637
the company killed by code.

161
00:08:44,096 --> 00:08:48,965
In 1988, or thereabouts, I
was working for a company.

162
00:08:48,965 --> 00:08:50,917
And we were building a large

163
00:08:50,917 --> 00:08:53,707
network management system in C.

164
00:08:53,707 --> 00:08:57,874
We purchased a debugger
from a company named Sword.

165
00:08:59,435 --> 00:09:02,443
It allowed us to single
step and breakpoint

166
00:09:02,443 --> 00:09:04,693
our way through our C code.

167
00:09:06,200 --> 00:09:09,627
- Whoa, like, you know
I've got to debug my

168
00:09:09,627 --> 00:09:12,960
Ruby source code all the time, you know.

169
00:09:15,216 --> 00:09:20,005
- Yeah, but back then a
source-level debugger was a rarity.

170
00:09:20,005 --> 00:09:24,133
I mean most of the time
we debugged in hex.

171
00:09:24,133 --> 00:09:24,966
- (laughing) Yeah,

172
00:09:24,966 --> 00:09:25,825
(laughing) yeah, yeah,

173
00:09:25,825 --> 00:09:27,155
that sounds like a nightmare.

174
00:09:27,155 --> 00:09:29,405
(laughing)

175
00:09:30,549 --> 00:09:31,829
- Oh, it was.

176
00:09:31,829 --> 00:09:34,128
Of course, it's all we knew, but it was.

177
00:09:34,128 --> 00:09:36,299
But look, this Sword tool was great.

178
00:09:36,299 --> 00:09:38,757
I mean it was very
powerful, and it saved us

179
00:09:38,757 --> 00:09:41,144
a boatload of time and effort.

180
00:09:41,144 --> 00:09:42,144
We loved it.

181
00:09:44,056 --> 00:09:45,653
- Gosh, Uncle Bob,

182
00:09:45,653 --> 00:09:49,820
that must've been a really
popular product back then.

183
00:09:50,963 --> 00:09:52,416
- Oh, it was.

184
00:09:52,416 --> 00:09:55,448
I mean they were doing a gang
buster business at first.

185
00:09:55,448 --> 00:09:57,608
The trade journals loved them,

186
00:09:57,608 --> 00:10:01,117
and the folks at user
groups and conferences,

187
00:10:01,117 --> 00:10:03,200
they couldn't get enough.

188
00:10:06,077 --> 00:10:09,408
A couple of years later, it was 1990,

189
00:10:09,408 --> 00:10:11,557
and we started dreaming about switching

190
00:10:11,557 --> 00:10:13,557
from C to C++.

191
00:10:16,424 --> 00:10:18,624
We called Sword and asked
them whether they'd be

192
00:10:18,624 --> 00:10:21,791
supporting C++ anytime soon.

193
00:10:23,312 --> 00:10:25,992
They told us that the C++ version would be

194
00:10:25,992 --> 00:10:27,575
coming pretty soon.

195
00:10:29,432 --> 00:10:30,849
But time wore on.

196
00:10:32,341 --> 00:10:34,508
For six months it wore on.

197
00:10:36,931 --> 00:10:41,098
But finally, the C++ version
of the Sword debugger arrived.

198
00:10:42,083 --> 00:10:45,597
(party horn) We were really excited.

199
00:10:45,597 --> 00:10:49,097
And so we installed it and we fired it up.

200
00:10:50,317 --> 00:10:54,484
But it took 45 minutes to
load and then it crashed.

201
00:10:55,917 --> 00:10:57,517
- (laughing) Yeah.

202
00:10:57,517 --> 00:10:59,053
(laughing) Boom.

203
00:10:59,053 --> 00:11:01,303
(laughing)

204
00:11:02,496 --> 00:11:05,347
- Well, we didn't think it was so funny.

205
00:11:05,347 --> 00:11:09,667
Debugging C++ in hex is
not an awful lot of fun,

206
00:11:09,667 --> 00:11:11,875
so we called up Sword
and we told them they had

207
00:11:11,875 --> 00:11:15,149
to fix this problem, and they swore to us

208
00:11:15,149 --> 00:11:18,317
that they'd fix it in the next release.

209
00:11:18,317 --> 00:11:19,880
- (laughing) Yeah.

210
00:11:19,880 --> 00:11:22,728
(laughing) And I bet it took
'em another six months (laughs)

211
00:11:22,728 --> 00:11:26,077
to send you a new release. (laughing)

212
00:11:26,077 --> 00:11:28,994
Yes, Jerry, it did, and believe me,

213
00:11:30,003 --> 00:11:33,413
our patience was growing mighty thin.

214
00:11:33,413 --> 00:11:34,925
- (laughing) Yeah, yeah.

215
00:11:34,925 --> 00:11:36,651
And then when you got it, (laughing)

216
00:11:36,651 --> 00:11:38,443
it still took 45 minutes to load

217
00:11:38,443 --> 00:11:42,459
and then it crashed, didn't it? (laughing)

218
00:11:42,459 --> 00:11:46,042
- Yes, Jerry, that's
exactly what happened.

219
00:11:48,099 --> 00:11:50,427
Needless to say, we cancelled our license

220
00:11:50,427 --> 00:11:52,467
and got on about our business.

221
00:11:52,467 --> 00:11:55,339
From our point of view,
that product was dead.

222
00:11:55,339 --> 00:11:56,552
(beeping sounds)

223
00:11:56,552 --> 00:11:57,739
- [Broadcaster] We interrupt this program

224
00:11:57,739 --> 00:12:00,064
to bring you a special news bulletin.

225
00:12:00,064 --> 00:12:04,613
Sword Inc., famed creator of
the very popular C debugger

226
00:12:04,613 --> 00:12:08,780
has declared bankruptcy and
closed its doors forever.

227
00:12:09,675 --> 00:12:13,842
We now return you to your
regularly scheduled program.

228
00:12:15,091 --> 00:12:18,749
- Yeah, it was just a few
months after that disastrous

229
00:12:18,749 --> 00:12:21,101
second release that the company tanked

230
00:12:21,101 --> 00:12:23,434
and the product disappeared.

231
00:12:25,061 --> 00:12:28,061
But that's not where the story ends.

232
00:12:29,840 --> 00:12:33,291
A decade later, I was at a C++ conference,

233
00:12:33,291 --> 00:12:35,189
and I met one of the developers who used

234
00:12:35,189 --> 00:12:37,867
to work at Sword back then.

235
00:12:37,867 --> 00:12:42,034
I asked him what happened,
and he told me the story.

236
00:12:43,467 --> 00:12:46,707
- Son, when we first started that project,

237
00:12:46,707 --> 00:12:50,288
those yahoos in marketing
told us we had to be first

238
00:12:50,288 --> 00:12:52,117
to market at all costs.

239
00:12:52,117 --> 00:12:54,597
If we weren't first to
market, then there was

240
00:12:54,597 --> 00:12:56,888
no point in even getting started.

241
00:12:56,888 --> 00:12:58,608
So we rushed, son.

242
00:12:58,608 --> 00:13:01,728
We rushed like a horse
in a raging brush fire.

243
00:13:01,728 --> 00:13:04,539
Like a rabbit running
from a snarling wolf.

244
00:13:04,539 --> 00:13:08,019
We rushed, and we made one hell of a mess.

245
00:13:08,019 --> 00:13:10,277
When we were done, that
code looked like a whole

246
00:13:10,277 --> 00:13:14,027
herd of hungry hogs had
stampeded through it.

247
00:13:15,056 --> 00:13:18,645
I tell you, son, it was a
miracle that code worked at all.

248
00:13:18,645 --> 00:13:22,024
And getting it working,
well, that was a bunch of

249
00:13:22,024 --> 00:13:24,744
bailin', and hailin', and
hookin', and crookin',

250
00:13:24,744 --> 00:13:27,744
and duct tape, and all
kinds of shenanigans,

251
00:13:27,744 --> 00:13:30,616
but we got it working,
son, we got it working

252
00:13:30,616 --> 00:13:33,116
just by the skin of our teeth.

253
00:13:34,595 --> 00:13:37,245
Of course, then, it was all we could do

254
00:13:37,245 --> 00:13:40,133
to keep it working, son,
'cause there was always

255
00:13:40,133 --> 00:13:44,093
another bug fix or some
high priority feature.

256
00:13:44,093 --> 00:13:46,405
The customers kept on wanting to write

257
00:13:46,405 --> 00:13:49,915
bigger and bigger programs
and go faster and faster.

258
00:13:49,915 --> 00:13:53,245
So we kept right on rushin',
son, there was no time

259
00:13:53,245 --> 00:13:56,464
to go back and clean nothin'
up 'cause there was always

260
00:13:56,464 --> 00:14:00,675
some new thing, some maximum
priority thingamawhats,

261
00:14:00,675 --> 00:14:03,299
that some customer had to be satisfied.

262
00:14:03,299 --> 00:14:06,821
We never managed to clean it, son.

263
00:14:06,821 --> 00:14:11,000
And then, son, why, they
dropped a mother lode

264
00:14:11,000 --> 00:14:12,907
of horse manure on the fan.

265
00:14:12,907 --> 00:14:15,877
They told us we had just a few months

266
00:14:15,877 --> 00:14:18,877
to get the whole thing workin' with C++.

267
00:14:18,877 --> 00:14:23,408
C++, son, do you know how hard
it is to parse that language?

268
00:14:23,408 --> 00:14:25,368
Well, it ain't easy, let me tell ya.

269
00:14:25,368 --> 00:14:28,517
Now, we looked at that, we said,
"That was just impossible."

270
00:14:28,517 --> 00:14:31,725
That code was already a
mess, it was more tangled

271
00:14:31,725 --> 00:14:34,225
than a hay stack in a tornado.

272
00:14:35,355 --> 00:14:38,424
Oh, we tried, son, we tried alright.

273
00:14:38,424 --> 00:14:41,515
We worked on that like a mare giving birth

274
00:14:41,515 --> 00:14:43,323
to a full-grown stallion.

275
00:14:43,323 --> 00:14:46,064
We worked in the mornings,
we worked in the evenings,

276
00:14:46,064 --> 00:14:47,861
we worked on the weekends.

277
00:14:47,861 --> 00:14:50,800
We worked and we worked and we worked.

278
00:14:50,800 --> 00:14:53,157
And we failed, son, we failed.

279
00:14:53,157 --> 00:14:57,027
We couldn't make that tangled
mess of code parse C++.

280
00:14:57,027 --> 00:14:59,610
It was a consign disaster, son.

281
00:15:00,555 --> 00:15:02,163
And the reason we failed

282
00:15:02,163 --> 00:15:05,580
was because we rushed in the first place.

283
00:15:06,573 --> 00:15:10,173
- Okay, I admit it, I embellished
that a little bit, but

284
00:15:10,173 --> 00:15:13,848
not actually by very much and
not in any substantive way.

285
00:15:13,848 --> 00:15:17,400
What the guy told me was that
they rushed that C product

286
00:15:17,400 --> 00:15:19,859
to market and made a
huge mess in doing it.

287
00:15:19,859 --> 00:15:23,080
And then they couldn't transition to C++.

288
00:15:23,080 --> 00:15:26,320
They saw their C market dwindling
away out from underneath

289
00:15:26,320 --> 00:15:29,437
them, and they couldn't follow it into C++

290
00:15:29,437 --> 00:15:33,667
because of the mess
they'd made in the code.

291
00:15:33,667 --> 00:15:36,069
- It would appear that Sword Inc. was

292
00:15:36,069 --> 00:15:38,928
destroyed by its own bad code.

293
00:15:38,928 --> 00:15:41,208
At least in their case, the premise that

294
00:15:41,208 --> 00:15:44,625
good code matters was not fragile at all.

295
00:15:46,336 --> 00:15:49,169
- Yeah, okay, like, you know,

296
00:15:49,169 --> 00:15:51,952
sure, but, but, like, why?

297
00:15:51,952 --> 00:15:56,119
I mean what was it about the
bad code that killed them?

298
00:15:57,109 --> 00:16:00,411
(beeping sounds)

299
00:16:00,411 --> 00:16:03,078
(keys clicking)

300
00:16:06,051 --> 00:16:09,800
- Have you ever worked
on a greenfield project?

301
00:16:09,800 --> 00:16:13,280
Do you remember how productive it was?

302
00:16:13,280 --> 00:16:14,819
(keys clicking)

303
00:16:14,819 --> 00:16:18,488
Do you remember how lightning
crackled from your finger tips

304
00:16:18,488 --> 00:16:22,493
as you got feature after feature working.

305
00:16:22,493 --> 00:16:24,005
- Yeah, (laughs) yeah, yeah.

306
00:16:24,005 --> 00:16:26,195
I could just blast a whole
bunch of features together

307
00:16:26,195 --> 00:16:28,083
in just a few hours. (laughing)

308
00:16:28,083 --> 00:16:31,149
It was fun. (laughing)

309
00:16:31,149 --> 00:16:34,717
- Yeah, man, like, you
know, they would come to me

310
00:16:34,717 --> 00:16:37,605
and they'd ask me for a feature.

311
00:16:37,605 --> 00:16:41,643
And I, I'd, like, have it ready
for 'em that same afternoon.

312
00:16:41,643 --> 00:16:44,976
And so they really thought I was a hero.

313
00:16:46,443 --> 00:16:50,333
- Yeah, I'm sure it felt like
you were going real fast,

314
00:16:50,333 --> 00:16:52,315
but it didn't last, did it?

315
00:16:52,315 --> 00:16:55,133
As the months went by, I'll
bet you started feeling

316
00:16:55,133 --> 00:16:59,216
slower and slower until
you were barely crawling.

317
00:17:01,093 --> 00:17:03,179
That's what happens to projects.

318
00:17:03,179 --> 00:17:06,179
They start out fast, but then after a few

319
00:17:06,179 --> 00:17:10,248
weeks or months, they slow way, way down.

320
00:17:10,248 --> 00:17:11,579
And why?

321
00:17:11,579 --> 00:17:15,246
Because there's a mess
building in the code.

322
00:17:16,349 --> 00:17:19,989
The more that mess grows,
the harder it becomes

323
00:17:19,989 --> 00:17:23,560
to add new features or
change existing code

324
00:17:23,560 --> 00:17:27,488
until, finally, things that
would have taken you days

325
00:17:27,488 --> 00:17:31,655
at the beginning now take
you weeks or even months.

326
00:17:33,947 --> 00:17:37,699
But now think of it from
the manager's point of view.

327
00:17:37,699 --> 00:17:40,088
They saw how fast you
were going at the start,

328
00:17:40,088 --> 00:17:43,208
and they laid their plans
based on that speed.

329
00:17:43,208 --> 00:17:48,077
They made promises to
customers based on that speed.

330
00:17:48,077 --> 00:17:51,339
They don't understand why you slowed down.

331
00:17:51,339 --> 00:17:54,371
All they understand is that
now they're looking at this

332
00:17:54,371 --> 00:17:59,360
very scary gap, a gap that's
costing them a lot of money

333
00:17:59,360 --> 00:18:03,848
and forcing them to
break a lot of promises.

334
00:18:03,848 --> 00:18:07,219
What would you do if you
were one of those managers

335
00:18:07,219 --> 00:18:10,019
and you saw your carefully
laid business plans

336
00:18:10,019 --> 00:18:12,784
going up in smoke because the programmers

337
00:18:12,784 --> 00:18:15,992
had inexplicably slowed down?

338
00:18:15,992 --> 00:18:19,483
What would you do if you saw
the profit you expected turn

339
00:18:19,483 --> 00:18:23,650
into a huge loss because the
programmers were going so slow?

340
00:18:25,661 --> 00:18:29,061
- I would remind them of
the mission and suggest

341
00:18:29,061 --> 00:18:33,144
that they find a more
intelligent way of working.

342
00:18:34,808 --> 00:18:37,469
- Gosh, Uncle Bob, I
think I'd just kind of

343
00:18:37,469 --> 00:18:39,563
sit them all down for some coffee or

344
00:18:39,563 --> 00:18:43,525
maybe some herbal tea and ask
them what their issues were.

345
00:18:43,525 --> 00:18:45,829
In the end, I think I'd probably end up

346
00:18:45,829 --> 00:18:49,288
begging them to go faster. (laughing)

347
00:18:49,288 --> 00:18:52,915
- Well, I'd tell those lazy
slackers to get moving.

348
00:18:52,915 --> 00:18:56,667
I'd tighten their deadlines,
I'd mandate overtime.

349
00:18:56,667 --> 00:19:00,834
And if any of them complained,
I'd show them the airlock.

350
00:19:01,672 --> 00:19:04,955
- Of course none of that is
going to do a bit of good

351
00:19:04,955 --> 00:19:07,864
because the problem is
not that the programmers

352
00:19:07,864 --> 00:19:10,419
aren't working hard, they are.

353
00:19:10,419 --> 00:19:13,699
The problem is that the
code is slowing them down,

354
00:19:13,699 --> 00:19:17,616
so the harder they work,
the slower they'll go.

355
00:19:21,128 --> 00:19:24,549
- And so, despite the
pressure, the threats,

356
00:19:24,549 --> 00:19:28,269
the deadlines, and the
overtime, the productivity still

357
00:19:28,269 --> 00:19:32,102
dwindles, and the scary
gap looms ever larger.

358
00:19:34,749 --> 00:19:38,232
- [Professor] It seems to
me that the solution to this

359
00:19:38,232 --> 00:19:41,912
problem is to hire more programmers.

360
00:19:41,912 --> 00:19:46,079
After all, if you double the
staff, you double your speed.

361
00:19:48,432 --> 00:19:50,421
- Well, not quite.

362
00:19:50,421 --> 00:19:54,893
You see, there's this
thing called Brooks' law

363
00:19:54,893 --> 00:19:58,981
which states that adding
manpower to a late project

364
00:19:58,981 --> 00:20:00,231
makes it later.

365
00:20:02,541 --> 00:20:04,363
It works like this.

366
00:20:04,363 --> 00:20:07,872
The team is working along at
this level of productivity,

367
00:20:07,872 --> 00:20:10,952
and then we decide to add more staff.

368
00:20:10,952 --> 00:20:14,013
The productivity plummets
for a few weeks or months

369
00:20:14,013 --> 00:20:17,693
as the new people suck the
life out of the old people,

370
00:20:17,693 --> 00:20:20,432
but then the new people start to get smart

371
00:20:20,432 --> 00:20:22,763
and their productivity rises.

372
00:20:22,763 --> 00:20:26,930
In theory, it should rise
above where it was before.

373
00:20:28,803 --> 00:20:31,803
- Except for one small logical flaw.

374
00:20:33,293 --> 00:20:36,710
Precisely who is teaching the new people?

375
00:20:38,243 --> 00:20:40,512
- The people who did this.

376
00:20:40,512 --> 00:20:44,011
And it's not just the old
people teaching the new people,

377
00:20:44,011 --> 00:20:47,511
it's the old code teaching the new people.

378
00:20:49,712 --> 00:20:52,731
The more the new people
read through the old code

379
00:20:52,731 --> 00:20:55,848
and deal with the old
code, the more they realize

380
00:20:55,848 --> 00:20:58,568
how things are done around here.

381
00:20:58,568 --> 00:21:01,917
And so they emulate the
behaviors that made the mess in

382
00:21:01,917 --> 00:21:06,084
the first place, and, of course,
the mess continues to grow.

383
00:21:07,355 --> 00:21:11,464
And so all hope of increasing
productivity is dashed

384
00:21:11,464 --> 00:21:15,784
as the increasing mess
overwhelms the new staff

385
00:21:15,784 --> 00:21:19,951
and the productivity resumes
its inexorable downward trend.

386
00:21:22,528 --> 00:21:25,000
- Except now the business is spending

387
00:21:25,000 --> 00:21:27,768
much more money on that new staff.

388
00:21:27,768 --> 00:21:29,989
And so the scary gap has gotten

389
00:21:29,989 --> 00:21:32,168
quite a bit scarier, hasn't it?

390
00:21:32,168 --> 00:21:33,001
Hmph!

391
00:21:34,027 --> 00:21:35,163
- Right.

392
00:21:35,163 --> 00:21:38,328
Cash flow increases by a
step function when you add

393
00:21:38,328 --> 00:21:42,037
new staff, and the decreasing
productivity makes that

394
00:21:42,037 --> 00:21:44,370
scary gap that much scarier.

395
00:21:45,867 --> 00:21:47,907
- (laughing) Yeah, maybe that was a fluke.

396
00:21:47,907 --> 00:21:49,792
(laughing) Let's try it again.

397
00:21:49,792 --> 00:21:52,544
(laughing)

398
00:21:52,544 --> 00:21:56,085
- Indeed, lots of businesses
try this many times

399
00:21:56,085 --> 00:21:59,115
because, after all, the
definition of sanity

400
00:21:59,115 --> 00:22:02,443
is to repeat a failing
strategy until it succeeds.

401
00:22:02,443 --> 00:22:04,973
But, of course, it doesn't succeed, and so

402
00:22:04,973 --> 00:22:09,140
the scary gap continues to grow
and get scarier and scarier.

403
00:22:12,325 --> 00:22:14,213
- At this point, it might be wisest

404
00:22:14,213 --> 00:22:16,973
to consult with the
programmers themselves.

405
00:22:16,973 --> 00:22:19,333
They are closest to the problem.

406
00:22:19,333 --> 00:22:21,750
Perhaps they have a solution.

407
00:22:22,944 --> 00:22:25,733
- Oh, yeah, sure they do. (laughs)

408
00:22:25,733 --> 00:22:28,341
You want to guess what it is?

409
00:22:28,341 --> 00:22:31,296
(beeping sounds)

410
00:22:31,296 --> 00:22:33,963
(keys clicking)

411
00:22:35,598 --> 00:22:37,968
- (laughing) Yeah, start over.

412
00:22:37,968 --> 00:22:39,595
(laughing) Throw it all away.

413
00:22:39,595 --> 00:22:42,456
(laughing) Redesign the whole thing.

414
00:22:42,456 --> 00:22:44,706
(laughing)

415
00:22:45,571 --> 00:22:48,563
- Yeah, like, you know, the
best thing that could happen

416
00:22:48,563 --> 00:22:51,771
to this system is for
someone to walk into the

417
00:22:51,771 --> 00:22:54,854
machine room with a great big magnet.

418
00:22:56,331 --> 00:22:59,979
- Oh, oh, Uncle Bob, I
want to be the architect.

419
00:22:59,979 --> 00:23:03,062
Can I, can I please be the architect?

420
00:23:04,336 --> 00:23:09,048
- As you might imagine, this
idea thrills the programmers

421
00:23:09,048 --> 00:23:11,477
but terrifies the managers.

422
00:23:11,477 --> 00:23:13,877
The managers know how much
money was spent on the

423
00:23:13,877 --> 00:23:17,208
first design, and the thought
of spending all that money

424
00:23:17,208 --> 00:23:20,616
all over again chills them to the marrow.

425
00:23:20,616 --> 00:23:22,928
What's more, they've
got no confidence at all

426
00:23:22,928 --> 00:23:27,448
that the redesign is actually
gonna solve the problem.

427
00:23:27,448 --> 00:23:29,277
But here's the thing.

428
00:23:29,277 --> 00:23:31,197
What other choice do the have?

429
00:23:31,197 --> 00:23:33,723
I mean they've tried
everything else they know to do

430
00:23:33,723 --> 00:23:37,221
and nothing worked, and they
can't go on the way things are.

431
00:23:37,221 --> 00:23:40,240
So as scary as this option is,

432
00:23:40,240 --> 00:23:44,032
it's kind of the last chance they've got.

433
00:23:44,032 --> 00:23:46,541
And there's one other factor.

434
00:23:46,541 --> 00:23:50,363
Programmers, you should never
underestimate your power

435
00:23:50,363 --> 00:23:53,101
because you are the ones who know.

436
00:23:53,101 --> 00:23:55,531
Managers don't, they
aren't the ones who know.

437
00:23:55,531 --> 00:23:58,819
You know, you were hired because you know.

438
00:23:58,819 --> 00:24:02,179
So if you beat the drums for a redesign,

439
00:24:02,179 --> 00:24:04,829
as much as the managers might not like it,

440
00:24:04,829 --> 00:24:07,389
you will eventually win
because the managers

441
00:24:07,389 --> 00:24:10,806
understand that you're the ones who know.

442
00:24:12,808 --> 00:24:15,768
- Well, yes, you'll win alright.

443
00:24:15,768 --> 00:24:17,935
And it will be a disaster.

444
00:24:19,859 --> 00:24:22,853
- And what a disaster it'll be.

445
00:24:22,853 --> 00:24:27,020
But it doesn't start out
looking like a disaster, oh no.

446
00:24:27,883 --> 00:24:29,664
On the day that the managers announce

447
00:24:29,664 --> 00:24:31,723
that we're going to redesign the project,

448
00:24:31,723 --> 00:24:34,896
a cheer goes up from the
development organization.

449
00:24:34,896 --> 00:24:37,285
Hallelujah, we're going
back to the beginning.

450
00:24:37,285 --> 00:24:39,115
We can be productive again.

451
00:24:39,115 --> 00:24:41,224
We're gonna leave this mess behind.

452
00:24:41,224 --> 00:24:45,391
We don't have to live in
the old code base anymore.

453
00:24:46,835 --> 00:24:50,704
Of course, the next day in
the cold light of reality,

454
00:24:50,704 --> 00:24:54,061
we realize that we are
not going to be the ones

455
00:24:54,061 --> 00:24:56,451
who will be redesigning the system.

456
00:24:56,451 --> 00:25:00,920
Management has picked the
10 best, the tiger team.

457
00:25:00,920 --> 00:25:04,381
The ones who made the
mess in the first place.

458
00:25:04,381 --> 00:25:07,280
They're gonna be the ones
who will sit in a room

459
00:25:07,280 --> 00:25:10,757
working on a greenfield
project on the new design.

460
00:25:10,757 --> 00:25:13,037
They're the ones who are gonna lead us

461
00:25:13,037 --> 00:25:15,120
into a bright new future.

462
00:25:17,917 --> 00:25:19,907
The rest of us hate those guys.

463
00:25:19,907 --> 00:25:22,088
They're off doing some greenfield thing

464
00:25:22,088 --> 00:25:25,877
while the rest of us are stuck
maintaining the old system

465
00:25:25,877 --> 00:25:28,402
because, after all,
customers aren't gonna wait

466
00:25:28,402 --> 00:25:32,235
months or years for new
features or bug fixes.

467
00:25:33,587 --> 00:25:36,259
- And now just where do you think the

468
00:25:36,259 --> 00:25:39,824
tiger team is going to get
their requirements from?

469
00:25:39,824 --> 00:25:41,221
You don't actually believe there's an

470
00:25:41,221 --> 00:25:44,471
accurate requirements document, do you?

471
00:25:45,944 --> 00:25:50,304
- No, man, I mean
there's been way too many

472
00:25:50,304 --> 00:25:55,253
late night fixes and midnight
modifications for that.

473
00:25:55,253 --> 00:25:56,264
- (laughing) Yeah.

474
00:25:56,264 --> 00:25:58,629
(laughing) The requirements
aren't in a document anymore.

475
00:25:58,629 --> 00:26:01,256
(laughing) Now they're
buried in the old code.

476
00:26:01,256 --> 00:26:03,736
(laughing)

477
00:26:03,736 --> 00:26:05,085
- That's right.

478
00:26:05,085 --> 00:26:07,816
The requirements are in the old code.

479
00:26:07,816 --> 00:26:10,237
So that tiger team that's supposed to be

480
00:26:10,237 --> 00:26:12,067
taking us into the future,

481
00:26:12,067 --> 00:26:15,797
they're spending their time
poring over the old code,

482
00:26:15,797 --> 00:26:17,917
trying to figure out just what it is

483
00:26:17,917 --> 00:26:19,861
that the old system does.

484
00:26:19,861 --> 00:26:21,160
And then they're trying to figure out

485
00:26:21,160 --> 00:26:24,571
how they can reorganize
and repartition that code

486
00:26:24,571 --> 00:26:28,738
so that it'll be better by
some definition of better.

487
00:26:30,811 --> 00:26:33,200
Meanwhile, the rest of
us are working like dogs

488
00:26:33,200 --> 00:26:35,821
to fix bugs and add new features.

489
00:26:35,821 --> 00:26:39,280
So while the tiger team
is off studying the code,

490
00:26:39,280 --> 00:26:42,780
we're busy changing it out from under 'em.

491
00:26:43,640 --> 00:26:45,832
- The logical implication being

492
00:26:45,832 --> 00:26:48,832
that the two factions are in a race.

493
00:26:50,472 --> 00:26:52,341
- Right, a race.

494
00:26:52,341 --> 00:26:56,291
And just like Achilles and the
tortoise in Zeno's paradox,

495
00:26:56,291 --> 00:27:00,232
every time the tiger team got
to where the old system was,

496
00:27:00,232 --> 00:27:01,992
we would've moved the old system

497
00:27:01,992 --> 00:27:04,909
on with new features and new fixes.

498
00:27:06,707 --> 00:27:08,957
- And while it is mathematically possible

499
00:27:08,957 --> 00:27:13,584
to prove that Achilles will
eventually pass the tortoise,

500
00:27:13,584 --> 00:27:16,751
that doesn't seem to work in software.

501
00:27:18,088 --> 00:27:20,093
- I once worked for a company where that

502
00:27:20,093 --> 00:27:22,939
race went on for 10 years.

503
00:27:22,939 --> 00:27:26,520
10 years after we started the redesign,

504
00:27:26,520 --> 00:27:28,309
development was still going on

505
00:27:28,309 --> 00:27:31,809
and we were still shipping the old system.

506
00:27:32,989 --> 00:27:36,520
Eventually, in desperation,
the managers decided

507
00:27:36,520 --> 00:27:39,269
to replace all the old
systems in the field

508
00:27:39,269 --> 00:27:41,920
with new systems even
though the new systems

509
00:27:41,920 --> 00:27:46,069
couldn't do everything
the old systems could.

510
00:27:46,069 --> 00:27:47,819
- I would imagine that the customers

511
00:27:47,819 --> 00:27:50,402
were rather unhappy about that.

512
00:27:52,269 --> 00:27:55,619
- Yeah, some of them
were pretty upset, but

513
00:27:55,619 --> 00:27:59,808
that was nothing compared
to the developers.

514
00:27:59,808 --> 00:28:03,189
You see, the tiger team
had long since gone on

515
00:28:03,189 --> 00:28:05,083
to bigger and better things,

516
00:28:05,083 --> 00:28:07,563
and the programmers that had replaced them

517
00:28:07,563 --> 00:28:11,141
were racing like mad to
keep up with the old system.

518
00:28:11,141 --> 00:28:13,171
They were horrified at the idea that

519
00:28:13,171 --> 00:28:15,584
they'd actually deploy the new system.

520
00:28:15,584 --> 00:28:17,443
They said, "You can't deploy this.

521
00:28:17,443 --> 00:28:21,021
"It's crap, it's got to be redesigned."

522
00:28:21,021 --> 00:28:23,661
The big redesign in the sky

523
00:28:23,661 --> 00:28:26,893
is almost always a failing strategy.

524
00:28:26,893 --> 00:28:29,352
Oh, it might work for a small thing

525
00:28:29,352 --> 00:28:31,648
of a couple of man months or so,

526
00:28:31,648 --> 00:28:34,368
but for big projects,
it's almost certain to end

527
00:28:34,368 --> 00:28:38,456
in horrific waste and ultimate disaster.

528
00:28:38,456 --> 00:28:41,690
So that's how bad code can destroy

529
00:28:41,690 --> 00:28:44,940
a team, a division, and even a company.

530
00:28:47,933 --> 00:28:51,053
- And so here's the bottom line.

531
00:28:51,053 --> 00:28:54,973
You cannot deal with a mess
by running away from it.

532
00:28:54,973 --> 00:28:57,573
The only way to effectively
deal with that mess

533
00:28:57,573 --> 00:29:00,672
is to turn around and face it

534
00:29:00,672 --> 00:29:03,172
and find the rot and clean it.

535
00:29:04,331 --> 00:29:07,760
(beeping sounds)

536
00:29:07,760 --> 00:29:10,427
(keys clicking)

537
00:29:13,389 --> 00:29:15,979
- What happens to software over time?

538
00:29:15,979 --> 00:29:17,312
Why does it rot?

539
00:29:18,309 --> 00:29:21,200
Why do the beautiful designs we start with

540
00:29:21,200 --> 00:29:25,117
so often degrade and rot
into a festering pile?

541
00:29:27,709 --> 00:29:31,507
- At the moment of
inception, the design of a

542
00:29:31,507 --> 00:29:35,093
software system is usually a simple,

543
00:29:35,093 --> 00:29:37,923
and elegant, and beautiful thing.

544
00:29:37,923 --> 00:29:41,181
And likewise, when we
first write the code,

545
00:29:41,181 --> 00:29:46,037
that code is simple, and
easy to change, and elegant,

546
00:29:46,037 --> 00:29:49,204
and our hopes for the system are high.

547
00:29:50,717 --> 00:29:53,749
- But with time, that code'll start to rot

548
00:29:53,749 --> 00:29:57,069
like a piece of bad meat
sitting in a hot barn.

549
00:29:57,069 --> 00:29:59,544
And the stink'll get so bad that not even

550
00:29:59,544 --> 00:30:02,461
the hogs and crows will go near it.

551
00:30:03,712 --> 00:30:06,733
- You can tell how old a piece of code is

552
00:30:06,733 --> 00:30:09,443
by the facial expression of the developers

553
00:30:09,443 --> 00:30:12,943
as they bring it up on their screens, hmm.

554
00:30:15,024 --> 00:30:17,573
- Before we investigate why this happens,

555
00:30:17,573 --> 00:30:20,952
let's study that stench in more detail.

556
00:30:20,952 --> 00:30:24,619
What is it that makes
bad code smell so bad?

557
00:30:25,893 --> 00:30:28,893
(mechanical sounds)

558
00:30:31,235 --> 00:30:35,402
- Rigidity is the tendency
of a system to resist change.

559
00:30:37,653 --> 00:30:41,264
- A system is rigid when
that system requires us

560
00:30:41,264 --> 00:30:44,595
to make many changes to
many different places

561
00:30:44,595 --> 00:30:49,093
in order to fix a single bug
or add a single new behavior.

562
00:30:49,093 --> 00:30:53,260
Such a system resists change,
and so we say it is rigid.

563
00:30:55,224 --> 00:30:58,141
- I'd really appreciate an example.

564
00:30:59,584 --> 00:31:02,773
- Sure, let's now just say that your boss

565
00:31:02,773 --> 00:31:05,392
comes to you one day and
shows you a bug report

566
00:31:05,392 --> 00:31:07,371
and asks you if you can fix it.

567
00:31:07,371 --> 00:31:09,509
You look at that bug
report and you realize

568
00:31:09,509 --> 00:31:11,251
you know exactly where that bug is.

569
00:31:11,251 --> 00:31:13,931
You know the line of code that bug is on

570
00:31:13,931 --> 00:31:17,328
'cause you were just in that
module a week or two ago.

571
00:31:17,328 --> 00:31:20,248
And you know how to fix it
too, it's gonna be easy.

572
00:31:20,248 --> 00:31:25,229
It's gonna be easy-peasy,
simple as pie, no problemo.

573
00:31:25,229 --> 00:31:28,597
So you give your boss the
minimum estimate: three weeks.

574
00:31:28,597 --> 00:31:30,389
He goes away happy 'cause he got

575
00:31:30,389 --> 00:31:33,448
the minimum estimate for that task.

576
00:31:33,448 --> 00:31:36,027
Now you go to that module
and you scroll down

577
00:31:36,027 --> 00:31:37,659
to where you think that bug is.

578
00:31:37,659 --> 00:31:41,717
And sure enough, there it is
right like you thought it'd be.

579
00:31:41,717 --> 00:31:44,168
So you reach right in
there and you fix it.

580
00:31:44,168 --> 00:31:46,037
And you're about to go do something else

581
00:31:46,037 --> 00:31:48,309
so you don't give your boss
the idea that your minimum

582
00:31:48,309 --> 00:31:50,880
estimate was a little bit too long.

583
00:31:50,880 --> 00:31:54,600
But then there's this itch
at the back of your head.

584
00:31:54,600 --> 00:31:58,259
Something's bothering you
about that change, son.

585
00:31:58,259 --> 00:32:01,651
And that's when you realize
that the change you just made to

586
00:32:01,651 --> 00:32:05,699
that module is gonna break a
different module in the system.

587
00:32:05,699 --> 00:32:08,331
So you plop back down and
bring that other module

588
00:32:08,331 --> 00:32:11,120
up on your screen and scroll
to the place where you were

589
00:32:11,120 --> 00:32:14,619
thinking about, and sure
enough you find a problem.

590
00:32:14,619 --> 00:32:16,819
The change you made to the first module is

591
00:32:16,819 --> 00:32:18,840
incompatible with the second.

592
00:32:18,840 --> 00:32:23,691
So you reach into that
second module and you fix it.

593
00:32:23,691 --> 00:32:25,920
And now you know what's coming, don't you?

594
00:32:25,920 --> 00:32:28,792
Because sure as rain on a sunny day,

595
00:32:28,792 --> 00:32:31,901
there's other modules in the
system that aren't sympatico

596
00:32:31,901 --> 00:32:35,472
with the change you just
made to that second module.

597
00:32:35,472 --> 00:32:39,272
So now you start going from
module to module to module

598
00:32:39,272 --> 00:32:42,163
fixing issue after issue, trying to force

599
00:32:42,163 --> 00:32:44,872
the system back into a consistent state.

600
00:32:44,872 --> 00:32:48,883
You're like a dog chasing his
tail, burning lots of energy.

601
00:32:48,883 --> 00:32:51,633
But you're not getting anywheres.

602
00:32:53,064 --> 00:32:55,564
- And so the weeks will go by.

603
00:32:56,483 --> 00:33:01,024
Two weeks, three weeks,
four weeks, six weeks,

604
00:33:01,024 --> 00:33:02,912
and then your boss will come by

605
00:33:02,912 --> 00:33:06,032
to find out what happened
to your three week estimate,

606
00:33:06,032 --> 00:33:09,744
and you will undoubtedly
emit the pathetic phrase

607
00:33:09,744 --> 00:33:13,893
that so many software developers
have said in the past,

608
00:33:13,893 --> 00:33:17,483
"It was more complicated than I thought."

609
00:33:17,483 --> 00:33:18,316
Hmph.

610
00:33:21,891 --> 00:33:24,051
- Yeah, that's a rigid system.

611
00:33:24,051 --> 00:33:26,320
And it shows one of the
most frustrating things

612
00:33:26,320 --> 00:33:30,211
about rigid systems: their
wild unpredictability.

613
00:33:30,211 --> 00:33:33,861
Estimating a fix or an
enhancement is fraught with error

614
00:33:33,861 --> 00:33:36,531
because it's impossible to
properly determine the number

615
00:33:36,531 --> 00:33:39,320
of modules that will actually be changed.

616
00:33:39,320 --> 00:33:42,320
And so rigid systems blow estimates.

617
00:33:43,301 --> 00:33:44,134
- (Laughing) Yeah.

618
00:33:44,134 --> 00:33:45,616
(laughing) Boom!

619
00:33:45,616 --> 00:33:47,866
(laughing)

620
00:33:48,733 --> 00:33:51,733
(mechanical sounds)

621
00:33:53,701 --> 00:33:56,851
- A fragile system is a
system that malfunctions

622
00:33:56,851 --> 00:33:59,571
in many unpredictable ways when a

623
00:33:59,571 --> 00:34:01,988
single simple change is made.

624
00:34:03,899 --> 00:34:07,179
- We say that a system is fragile

625
00:34:07,179 --> 00:34:10,317
when the repair of a single bug

626
00:34:10,317 --> 00:34:13,608
or the addition of a single new feature

627
00:34:13,608 --> 00:34:17,320
causes a malfunction in
one or many other parts

628
00:34:17,320 --> 00:34:19,840
of the system that have no connection

629
00:34:19,840 --> 00:34:22,423
with the part that was changed.

630
00:34:23,971 --> 00:34:27,221
- I know, you want another
example, don't you?

631
00:34:27,221 --> 00:34:31,069
Well, this here fella's got a good one.

632
00:34:31,069 --> 00:34:33,656
- Long ago, I worked on a system

633
00:34:33,656 --> 00:34:36,277
that tested telephone lines.

634
00:34:36,277 --> 00:34:39,808
This system had 24 ASCII terminals

635
00:34:39,808 --> 00:34:42,317
connected to a central mini computer.

636
00:34:42,317 --> 00:34:46,877
The user interface was
character based and menu driven.

637
00:34:46,877 --> 00:34:49,688
And the menus were hierarchical.

638
00:34:49,688 --> 00:34:52,808
Deep down in one of the sub menus,

639
00:34:52,808 --> 00:34:55,757
there was a grammatical error.

640
00:34:55,757 --> 00:34:58,924
The word progress was spelled process.

641
00:34:59,907 --> 00:35:01,387
We all knew about this error.

642
00:35:01,387 --> 00:35:03,587
We all cringed whenever we saw it,

643
00:35:03,587 --> 00:35:07,254
but there was never a
good reason to fix it.

644
00:35:08,608 --> 00:35:10,928
Then one day, I was working in a module

645
00:35:10,928 --> 00:35:15,157
and I happened to scroll past
the string for that menu.

646
00:35:15,157 --> 00:35:18,456
It was an easy thing to
change, so I changed it.

647
00:35:18,456 --> 00:35:22,072
I felt pretty good about that too.

648
00:35:22,072 --> 00:35:25,200
Of course, I compiled it and I tested it.

649
00:35:25,200 --> 00:35:28,421
I brought it up on the screen
to make sure that it fit

650
00:35:28,421 --> 00:35:31,784
and there weren't any other
issues, and there weren't.

651
00:35:31,784 --> 00:35:34,413
And so I added it to the list of changes

652
00:35:34,413 --> 00:35:37,580
for the next release and I shipped it.

653
00:35:39,163 --> 00:35:42,843
Hundreds of systems started
crashing in the field.

654
00:35:42,843 --> 00:35:45,779
Not our systems, our customers' systems,

655
00:35:45,779 --> 00:35:47,555
but they blamed us anyway.

656
00:35:47,555 --> 00:35:49,691
We had customers on the telephone.

657
00:35:49,691 --> 00:35:52,152
We had managers rampaging around,

658
00:35:52,152 --> 00:35:53,960
pointing their fingers at people.

659
00:35:53,960 --> 00:35:57,627
We had programmers
hiding under their desks.

660
00:35:58,917 --> 00:36:03,624
What I had forgotten was that
in their infinite wisdom,

661
00:36:03,624 --> 00:36:07,235
our marketing department
had told our customer

662
00:36:07,235 --> 00:36:10,893
that the best way to interface
their systems to ours

663
00:36:10,893 --> 00:36:12,813
was to plug their computers into

664
00:36:12,813 --> 00:36:16,221
one of our RS232 terminal ports.

665
00:36:16,221 --> 00:36:17,923
Of course, that meant that the customer's

666
00:36:17,923 --> 00:36:20,883
software had to parse our menus.

667
00:36:20,883 --> 00:36:22,632
So when I changed that menu,

668
00:36:22,632 --> 00:36:25,382
it broke the customer's software.

669
00:36:26,363 --> 00:36:30,043
My boss came to me and said,
"What the hell did you do?!"

670
00:36:30,043 --> 00:36:32,603
And I said, I fixed a spelling error.

671
00:36:32,603 --> 00:36:35,936
And he said, "Well, don't ever do that!"

672
00:36:37,013 --> 00:36:40,603
- And so a fragile system
is a system that breaks

673
00:36:40,603 --> 00:36:43,773
in unintended and unpredictable ways

674
00:36:43,773 --> 00:36:46,549
when simple changes are made.

675
00:36:46,549 --> 00:36:49,749
Such systems are terrifying
to managers and customers

676
00:36:49,749 --> 00:36:53,166
because they are so wildly unpredictable.

677
00:36:54,149 --> 00:36:57,400
- Indeed, when systems are fragile,

678
00:36:57,400 --> 00:36:59,891
customers and managers
come to the conclusion

679
00:36:59,891 --> 00:37:03,019
that the software developers
have lost control of their

680
00:37:03,019 --> 00:37:06,869
software and don't know what
the hell they are doing.

681
00:37:06,869 --> 00:37:07,702
Hmph!

682
00:37:08,776 --> 00:37:11,776
(mechanical sounds)

683
00:37:13,875 --> 00:37:16,984
- An inseparable system
is a system in which

684
00:37:16,984 --> 00:37:21,165
those parts that might be
profitably used in another system

685
00:37:21,165 --> 00:37:24,998
cannot be separated out
from the first system.

686
00:37:26,565 --> 00:37:30,413
- Indeed, we say that
a system is inseparable

687
00:37:30,413 --> 00:37:32,723
when the various points of that system

688
00:37:32,723 --> 00:37:36,890
cannot be independent and be
used in some other system.

689
00:37:38,101 --> 00:37:40,680
- Let me give you an example.

690
00:37:40,680 --> 00:37:43,501
Let's say that I need a new car,

691
00:37:43,501 --> 00:37:47,072
and I got very specific
requirements for this new car.

692
00:37:47,072 --> 00:37:50,040
It's got to be silver,
it's got to seat six,

693
00:37:50,040 --> 00:37:53,571
and it's got to go 200 miles an hour.

694
00:37:53,571 --> 00:37:54,957
It turns out I talked to my

695
00:37:54,957 --> 00:37:57,267
brother-in-law and he's got the car.

696
00:37:57,267 --> 00:38:01,075
It's silver, it seats six,
it goes 200 miles an hour.

697
00:38:01,075 --> 00:38:03,315
What's more, he just lost his license,

698
00:38:03,315 --> 00:38:07,184
so he's gonna give it to me for free.

699
00:38:07,184 --> 00:38:09,275
There's just one catch.

700
00:38:09,275 --> 00:38:11,795
My brother-in-law's car has got a trailer.

701
00:38:11,795 --> 00:38:13,608
(honking)
And this trailer ain't coupled

702
00:38:13,608 --> 00:38:16,312
to the back of the car
with no hitch, no sir.

703
00:38:16,312 --> 00:38:19,333
That trailer's welded
onto the back of that car.

704
00:38:19,333 --> 00:38:21,173
The rear brakes have been
taken away from the car

705
00:38:21,173 --> 00:38:23,360
and put on the back wheels of the trailer.

706
00:38:23,360 --> 00:38:25,651
The rear lights have been put
on the back of the trailer.

707
00:38:25,651 --> 00:38:28,234
The trailer is part of the car.

708
00:38:30,160 --> 00:38:34,621
Now I gots me a really small
garage, and that trailer car,

709
00:38:34,621 --> 00:38:37,280
well, it just ain't
gonna fit in that garage.

710
00:38:37,280 --> 00:38:40,259
So I got to get rid of the
trailer off the back of that car.

711
00:38:40,259 --> 00:38:41,829
I go take it to a mechanic.

712
00:38:41,829 --> 00:38:44,888
I say, mechanic, take the
trailer off the back of this car.

713
00:38:44,888 --> 00:38:47,227
(honking)
He looks at me like I'm crazy.

714
00:38:47,227 --> 00:38:49,272
He says, "You can't take
the trailer off the back

715
00:38:49,272 --> 00:38:51,704
"of this car, that
trailer's part of the car.

716
00:38:51,704 --> 00:38:54,315
"It costs you lots more
than buying a new car.

717
00:38:54,315 --> 00:38:59,144
"And what's more, I'm not
guaranteeing my work."

718
00:38:59,144 --> 00:39:03,005
- To continue this example,
your boss comes to you one day

719
00:39:03,005 --> 00:39:06,424
and says, "You know that
module you got to write?

720
00:39:06,424 --> 00:39:09,413
"Well, there's this guy,
Joe, one floor below us

721
00:39:09,413 --> 00:39:12,304
"who wrote a module just
like it about a year ago.

722
00:39:12,304 --> 00:39:14,355
"You should go talk to
Joe and see how much

723
00:39:14,355 --> 00:39:16,938
"of that module you can reuse."

724
00:39:18,443 --> 00:39:22,610
Now, you know Joe, and you know
the kind of code Joe writes.

725
00:39:23,781 --> 00:39:27,861
So you're not really anxious
to go wading through his code

726
00:39:27,861 --> 00:39:30,909
to see if you can use any of it, but

727
00:39:30,909 --> 00:39:34,076
your boss asked, so you have to do it.

728
00:39:35,261 --> 00:39:38,651
So you get the code from
Joe and you look it over.

729
00:39:38,651 --> 00:39:42,869
And sure enough, it does
exactly what you need.

730
00:39:42,869 --> 00:39:44,786
But it's got a trailer.

731
00:39:48,469 --> 00:39:51,869
Joe's code does a lot of
things you don't need.

732
00:39:51,869 --> 00:39:54,640
And you realize that the
time and effort required

733
00:39:54,640 --> 00:39:57,411
to decouple Joe's code so that you can

734
00:39:57,411 --> 00:40:00,861
take the stuff you want and
leave behind the stuff you don't

735
00:40:00,861 --> 00:40:02,968
is so large that you might as well

736
00:40:02,968 --> 00:40:05,551
just write the module yourself.

737
00:40:06,747 --> 00:40:09,504
So you go back to your boss
and you tell him that you

738
00:40:09,504 --> 00:40:13,337
can't use Joe's code
because it's inseparable.

739
00:40:16,853 --> 00:40:20,184
- Inseparable systems are unpredictable.

740
00:40:20,184 --> 00:40:22,933
You never know if you
can reuse the components

741
00:40:22,933 --> 00:40:24,965
in the system, and so the changes

742
00:40:24,965 --> 00:40:27,798
cannot be reliably estimated, hmm.

743
00:40:28,696 --> 00:40:31,696
(mechanical sounds)

744
00:40:33,864 --> 00:40:36,483
- Opacity is the tendency of a system

745
00:40:36,483 --> 00:40:40,733
to be so ineptly structured
that no amount of effort

746
00:40:40,733 --> 00:40:44,900
can be applied to divine the
author's original intent.

747
00:40:46,032 --> 00:40:48,699
- We say that a system is opaque

748
00:40:49,552 --> 00:40:52,451
when reading the code
tells us little or nothing

749
00:40:52,451 --> 00:40:56,826
about what the system
does or the way it works.

750
00:40:56,826 --> 00:40:59,227
(pigs grunting)
- What they're trying to say

751
00:40:59,227 --> 00:41:00,677
is that the code looks worse

752
00:41:00,677 --> 00:41:03,260
than a pig sty in a rain storm.

753
00:41:05,525 --> 00:41:08,358
- This picture really says it all.

754
00:41:10,125 --> 00:41:13,245
Opaque code is hard to read,

755
00:41:13,245 --> 00:41:16,162
hard to change, hard to understand.

756
00:41:17,616 --> 00:41:18,449
- Meh!

757
00:41:20,221 --> 00:41:23,221
(mechanical sounds)

758
00:41:25,603 --> 00:41:27,752
- Raise your hands if you've ever been

759
00:41:27,752 --> 00:41:30,585
significantly impeded by bad code.

760
00:41:32,053 --> 00:41:34,886
(crowd clamoring)

761
00:41:38,411 --> 00:41:41,285
And you guys out there on
the other side of the screen,

762
00:41:41,285 --> 00:41:45,125
I see you out there, get
your hands up because

763
00:41:45,125 --> 00:41:49,292
we've all been impeded by bad
code, significantly impeded.

764
00:41:50,483 --> 00:41:53,483
The question is why did we write it?

765
00:41:56,112 --> 00:41:58,261
- (laughing) Stupid managers.

766
00:41:58,261 --> 00:42:00,511
(laughing)

767
00:42:02,440 --> 00:42:06,459
- You know, like, man, we've
had some really impatient

768
00:42:06,459 --> 00:42:09,959
customers and, well, I just couldn't wait.

769
00:42:11,429 --> 00:42:15,596
- Oh, Uncle Bob, we just
have impossible schedules.

770
00:42:18,099 --> 00:42:22,757
- Excuse me, but those are
just excuses and cop outs.

771
00:42:22,757 --> 00:42:25,256
It's your fingers on the keyboard.

772
00:42:25,256 --> 00:42:27,107
It's you that writes the code.

773
00:42:27,107 --> 00:42:28,690
It's you, not them.

774
00:42:29,755 --> 00:42:30,588
Hmm.

775
00:42:32,344 --> 00:42:33,864
- Sherlock's right.

776
00:42:33,864 --> 00:42:37,891
The only reason the code goes
bad is because we ruin it.

777
00:42:37,891 --> 00:42:40,080
We're the ones who make the mess.

778
00:42:40,080 --> 00:42:41,413
We rot the code.

779
00:42:42,811 --> 00:42:44,021
- (laughing) Yeah.

780
00:42:44,021 --> 00:42:46,389
But we got to go fast. (laughing)

781
00:42:46,389 --> 00:42:50,677
And that's the only way
to go fast. (laughing)

782
00:42:50,677 --> 00:42:55,165
- Yeah, like, I mean my
customers will never give me

783
00:42:55,165 --> 00:42:58,165
the time to do things the right way.

784
00:43:00,056 --> 00:43:03,907
- Yeah, Uncle Bob, we need to go fast, and

785
00:43:03,907 --> 00:43:06,240
that's why we make the mess.

786
00:43:07,515 --> 00:43:11,155
- I understand, you feel
the pressure of the deadline

787
00:43:11,155 --> 00:43:15,704
and the urgency of the
customer, and so you rush.

788
00:43:15,704 --> 00:43:18,954
But whenever you rush, you make a mess.

789
00:43:20,856 --> 00:43:25,387
- Yeah, but, like, dude, you
know, we can always go back

790
00:43:25,387 --> 00:43:29,554
and clean it later when
we're not in such a hurry.

791
00:43:30,944 --> 00:43:34,003
- Go back and clean it later?

792
00:43:34,003 --> 00:43:36,453
Go back and clean it later?!

793
00:43:36,453 --> 00:43:38,603
Would you please tell me the last time

794
00:43:38,603 --> 00:43:41,603
you went back and cleaned it later?!

795
00:43:43,141 --> 00:43:46,211
- It doesn't happen, we all know that.

796
00:43:46,211 --> 00:43:49,171
Deadline pressure doesn't
suddenly get less.

797
00:43:49,171 --> 00:43:53,032
Customers don't suddenly get more patient.

798
00:43:53,032 --> 00:43:57,199
Urgency never diminishes,
schedules never really relax.

799
00:43:58,360 --> 00:44:02,269
We all know that saying that
we'll go back and fix it later

800
00:44:02,269 --> 00:44:05,519
means we're never gonna go back at all.

801
00:44:07,080 --> 00:44:11,320
The irony is that making messes
is not the way you go fast.

802
00:44:11,320 --> 00:44:14,725
It's the way you go slow,
and you already know this.

803
00:44:14,725 --> 00:44:16,915
You've acknowledged it, you said you were

804
00:44:16,915 --> 00:44:19,748
significantly impeded by bad code.

805
00:44:22,016 --> 00:44:25,987
- If you want to go fast,
you have to stay clean.

806
00:44:25,987 --> 00:44:29,154
The only way to go fast is to go well.

807
00:44:31,125 --> 00:44:35,805
- This can be hard to accept
because most of us feel

808
00:44:35,805 --> 00:44:39,024
like we can get done faster by rushing.

809
00:44:39,024 --> 00:44:41,080
The truth is, though, you can't.

810
00:44:41,080 --> 00:44:45,247
If you rush through code,
you will always slow down.

811
00:44:46,277 --> 00:44:49,157
Now some people think
that they can go faster

812
00:44:49,157 --> 00:44:52,208
in the short term by rushing, even if that

813
00:44:52,208 --> 00:44:54,408
slows them down in the long term,

814
00:44:54,408 --> 00:44:56,357
but this is an illusion.

815
00:44:56,357 --> 00:44:59,747
Rushing always slows you
down, even in the short term.

816
00:44:59,747 --> 00:45:03,104
Making a mess is never
a strategy to go fast.

817
00:45:03,104 --> 00:45:05,584
The only way to go fast in the short term

818
00:45:05,584 --> 00:45:08,251
or the long term is to be clean.

819
00:45:10,061 --> 00:45:11,752
- Ah, grasshopper.

820
00:45:11,752 --> 00:45:15,112
Have you ever watched a
sushi chef prepare food?

821
00:45:15,112 --> 00:45:17,779
The next time you go, pay close attention.

822
00:45:17,779 --> 00:45:20,888
You can tell that the chef
has practiced his moves.

823
00:45:20,888 --> 00:45:22,909
Every motion has a purpose.

824
00:45:22,909 --> 00:45:25,437
Every motion is sure and quick.

825
00:45:25,437 --> 00:45:27,784
Every motion is precise.

826
00:45:27,784 --> 00:45:30,944
He cuts, he slices, he rolls, he positions

827
00:45:30,944 --> 00:45:34,173
in a flurry of concentrated activity.

828
00:45:34,173 --> 00:45:36,824
And then comes the magic moment

829
00:45:36,824 --> 00:45:39,952
where he takes the dish and
he puts it in front of you.

830
00:45:39,952 --> 00:45:42,211
The presentation is impeccable.

831
00:45:42,211 --> 00:45:44,314
But, grasshopper, look at his workspace.

832
00:45:44,314 --> 00:45:45,147
(gong hit)

833
00:45:45,147 --> 00:45:47,963
His workspace is clean and spotless.

834
00:45:47,963 --> 00:45:51,221
He has been cleaning
throughout the entire procedure

835
00:45:51,221 --> 00:45:55,388
because, grasshopper, that is
the only way he can go fast.

836
00:45:57,003 --> 00:46:00,072
(beeping sounds)

837
00:46:00,072 --> 00:46:02,739
(keys clicking)

838
00:46:05,173 --> 00:46:06,923
- What is clean code?

839
00:46:08,203 --> 00:46:11,763
I asked several experts that question.

840
00:46:11,763 --> 00:46:13,930
And here's what they said.

841
00:46:15,032 --> 00:46:19,843
Bjarne Stroustrup, the
inventor of C++, said,

842
00:46:19,843 --> 00:46:23,510
"I like my code to be
elegant and efficient.

843
00:46:24,344 --> 00:46:27,094
"Clean code should do one thing."

844
00:46:30,104 --> 00:46:34,271
Elegant code is code that
does a lot in a few words.

845
00:46:36,253 --> 00:46:40,420
Efficient code is code that
uses very few CPU cycles.

846
00:46:41,344 --> 00:46:45,261
But what does it mean
for code to do one thing?

847
00:46:46,824 --> 00:46:48,173
That's something we're gonna talk

848
00:46:48,173 --> 00:46:50,590
about in an upcoming episode.

849
00:46:52,117 --> 00:46:56,408
Grady Booch, the author
of this 1990s classic,

850
00:46:56,408 --> 00:47:00,435
Object Oriented Design and
Analysis with Applications,

851
00:47:00,435 --> 00:47:03,685
said, "Clean code is simple and direct.

852
00:47:05,443 --> 00:47:09,533
"Clean code reads like
well-written prose."

853
00:47:09,533 --> 00:47:11,613
We understand the simple and direct part,

854
00:47:11,613 --> 00:47:14,024
that doesn't need a
lot of explanation, but

855
00:47:14,024 --> 00:47:17,976
what does it mean for code to
read like well-written prose?

856
00:47:17,976 --> 00:47:19,809
Is that even possible?

857
00:47:21,005 --> 00:47:25,027
The simple answer to that
is, yes, it's possible.

858
00:47:25,027 --> 00:47:29,147
The slightly longer answer
is, well, almost possible.

859
00:47:29,147 --> 00:47:32,325
We'll actually have a
lot to say about this

860
00:47:32,325 --> 00:47:34,408
in the next few episodes.

861
00:47:35,925 --> 00:47:39,633
Michael Feathers, the author
of Working Effectively

862
00:47:39,633 --> 00:47:41,550
with Legacy Code, said,

863
00:47:43,843 --> 00:47:45,808
"Clean code always looks like

864
00:47:45,808 --> 00:47:48,975
"it was written by someone who cares."

865
00:47:50,259 --> 00:47:52,749
What a lovely remark.

866
00:47:52,749 --> 00:47:56,149
We might be wonderful
if all the code we read

867
00:47:56,149 --> 00:47:58,832
looked like it was written
by someone who cares.

868
00:47:58,832 --> 00:48:01,013
Have you ever read code that looked

869
00:48:01,013 --> 00:48:04,139
like the author didn't care at all?

870
00:48:04,139 --> 00:48:06,267
This course is going to be about

871
00:48:06,267 --> 00:48:09,100
learning how to care for our code.

872
00:48:10,627 --> 00:48:13,877
Ward Cunningham, the inventor of wikis,

873
00:48:15,419 --> 00:48:18,024
the inventor of more
things than I can mention,

874
00:48:18,024 --> 00:48:20,857
the mentor of most of us, he said,

875
00:48:25,275 --> 00:48:28,275
"You know you are reading clean code

876
00:48:28,275 --> 00:48:31,573
"when every routine that you read

877
00:48:31,573 --> 00:48:34,490
"is pretty much what you expected."

878
00:48:35,824 --> 00:48:40,464
It's very much like Ward to
say something so profound

879
00:48:40,464 --> 00:48:43,664
using words that sound so innocuous, but

880
00:48:43,664 --> 00:48:45,640
think about it, when is the last time

881
00:48:45,640 --> 00:48:48,467
you read code and thought to yourself,

882
00:48:48,467 --> 00:48:51,256
"Yeah, this is pretty
much what I expected."?

883
00:48:51,256 --> 00:48:54,461
Wouldn't it be nice if we
could all learn to write code

884
00:48:54,461 --> 00:48:58,331
that was pretty much what
we expected, and, in fact,

885
00:48:58,331 --> 00:49:00,709
that's what these videos are about:

886
00:49:00,709 --> 00:49:04,237
how to write code that others will think

887
00:49:04,237 --> 00:49:07,307
is pretty much what they expected.

888
00:49:07,307 --> 00:49:10,659
(beeping sounds)

889
00:49:10,659 --> 00:49:13,326
(keys clicking)

890
00:49:16,048 --> 00:49:20,776
Robert Baden Powell, the
father of the boy scouts,

891
00:49:20,776 --> 00:49:23,267
left a posthumous exhortation

892
00:49:23,267 --> 00:49:25,685
to the organization he founded.

893
00:49:25,685 --> 00:49:29,852
He told them, "Leave the world
better than you found it."

894
00:49:31,816 --> 00:49:34,573
Now what if we did that with our code?

895
00:49:34,573 --> 00:49:38,155
What if we left our code
better than we found it?

896
00:49:38,155 --> 00:49:41,432
What if every time you
checked a module in,

897
00:49:41,432 --> 00:49:43,032
you checked it in just a little

898
00:49:43,032 --> 00:49:45,168
bit better than you checked it out?

899
00:49:45,168 --> 00:49:48,907
What if you always did
some random act of kindness

900
00:49:48,907 --> 00:49:51,379
to the code so that it
would be better and better,

901
00:49:51,379 --> 00:49:54,744
and you never ever checked it in worse.

902
00:49:54,744 --> 00:49:58,584
If we all did that, then
our code would simply get

903
00:49:58,584 --> 00:50:01,413
better and better and better all the time,

904
00:50:01,413 --> 00:50:05,413
and that, too, is what
this course is all about.

905
00:50:06,789 --> 00:50:08,997
Well, that's it, that's our remake of

906
00:50:08,997 --> 00:50:11,469
episode one, I hope you enjoyed it.

907
00:50:11,469 --> 00:50:14,437
And if this is the first time
you've watched an episode,

908
00:50:14,437 --> 00:50:17,248
well, you've got a lot to look forward to.

909
00:50:17,248 --> 00:50:20,667
Episode two is all about
choosing good names.

910
00:50:20,667 --> 00:50:23,613
Episode three, four,
and five are all about

911
00:50:23,613 --> 00:50:25,880
functions and function structure.

912
00:50:25,880 --> 00:50:29,459
Episode six is a two-parter
on test-driven development.

913
00:50:29,459 --> 00:50:32,227
Episode seven is about architecture,

914
00:50:32,227 --> 00:50:35,507
and then we start getting
into the solid principles,

915
00:50:35,507 --> 00:50:37,664
and then the component principles,

916
00:50:37,664 --> 00:50:40,440
and then advanced test-driven development.

917
00:50:40,440 --> 00:50:43,245
And we have just scratched the surface.

918
00:50:43,245 --> 00:50:45,412
There's a lot more coming.

919
00:50:46,376 --> 00:50:48,793
(rock music)

920
00:51:17,323 --> 00:51:21,477
The Scarier Gap, it's named
after a man named Fred Scarier.

921
00:51:21,477 --> 00:51:25,155
Never mind, it's okay.
(laughing)

922
00:51:25,155 --> 00:51:26,181
- [Camera Person] Alright, ready?

923
00:51:26,181 --> 00:51:28,027
- No, I'm not ready at all, no.

924
00:51:28,027 --> 00:51:31,194
Okay. (clears throat)

925
00:51:32,576 --> 00:51:34,536
- [Camera Person] Action.

926
00:51:34,536 --> 00:51:37,453
- Sure. (laughing)

927
00:51:40,208 --> 00:51:41,766
Sure.
(laughing)

928
00:51:41,766 --> 00:51:43,544
Let's now just say, yeah, yeah, yeah.

929
00:51:43,544 --> 00:51:44,771
Okay, alright, sure.

930
00:51:44,771 --> 00:51:46,957
(clears throat) Yeah.

931
00:51:46,957 --> 00:51:49,207
(laughing)

932
00:51:50,344 --> 00:51:53,557
A rigid system. (fumbling words)

933
00:51:53,557 --> 00:51:56,605
Estimating how long, yes, okay.

934
00:51:56,605 --> 00:51:58,699
(droning sound)

935
00:51:58,699 --> 00:52:01,866
(lip flapping sounds)

936
00:52:03,763 --> 00:52:07,235
- Yeah, that's a rigid
system, alright, because,

937
00:52:07,235 --> 00:52:11,402
you see, rigid systems are
wildly unpredictable, and

938
00:52:12,435 --> 00:52:14,336
estimating them, trying to figure them out

939
00:52:14,336 --> 00:52:18,203
is fraught with error and frustration

940
00:52:18,203 --> 00:52:20,203
because, well, whatever.

941
00:52:21,131 --> 00:52:23,048
Because, um, something.

942
00:52:26,331 --> 00:52:28,750
'Cause you can never properly do.

943
00:52:28,750 --> 00:52:30,285
- [Camera Person] Is fraught with error

944
00:52:30,285 --> 00:52:32,483
because you can never properly determine,

945
00:52:32,483 --> 00:52:35,008
all the parts of the
system are going to need

946
00:52:35,008 --> 00:52:39,133
to be changed, so rigid
systems tend to blow estimates.

947
00:52:39,133 --> 00:52:41,560
You were supposed to lip sync that.

948
00:52:41,560 --> 00:52:44,024
- Well, I was trying.

949
00:52:44,024 --> 00:52:46,939
- [Camera Person] It wasn't
very successful, I would say.

950
00:52:46,939 --> 00:52:48,616
Let's do this, I feel good about

951
00:52:48,616 --> 00:52:49,939
this next one.
- Yeah, yeah, do you?

952
00:52:49,939 --> 00:52:51,856
- Mhmm.
- Okay, alright.

953
00:52:53,907 --> 00:52:56,243
- [Camera Person] Action.

954
00:52:56,243 --> 00:52:58,493
(laughing)

955
00:53:00,984 --> 00:53:02,760
That's such a good one.

956
00:53:02,760 --> 00:53:04,260
That's a good one.

957
00:53:05,555 --> 00:53:08,805
- And so, rigid systems blow estimates.

958
00:53:12,773 --> 00:53:15,483
- [Camera Person] Cut. Good job.

959
00:53:15,483 --> 00:53:17,179
So if you looked right at me.

960
00:53:17,179 --> 00:53:18,637
- 'Cause at the last minute I thought,

961
00:53:18,637 --> 00:53:20,325
no, I'm talking about fragile systems.

962
00:53:20,325 --> 00:53:23,683
- [Camera Person] Oh, you said 'em.

963
00:53:23,683 --> 00:53:25,869
- Yeah, that's a rigid system,

964
00:53:25,869 --> 00:53:28,120
and it shows one of the
most frustrating things

965
00:53:28,120 --> 00:53:31,989
about rigid systems: their
wild unpredictability.

966
00:53:31,989 --> 00:53:35,680
Estimating a fix or an
enhancement is fraught with error

967
00:53:35,680 --> 00:53:38,059
because it's impossible
to properly determine

968
00:53:38,059 --> 00:53:41,171
the number of modules that
will actually be changed.

969
00:53:41,171 --> 00:53:44,254
And so, rigid systems blow estimates.

970
00:53:46,240 --> 00:53:47,323
- Cut.
- Yeah!

971
00:53:48,390 --> 00:53:49,880
(laughing)

972
00:53:49,880 --> 00:53:51,531
- Cannot be predicted, blah, blah, blah,

973
00:53:51,531 --> 00:53:53,261
blah, blah, blah, blah.

974
00:53:53,261 --> 00:53:54,678
Blah, blah, blah.

975
00:53:56,779 --> 00:53:59,997
- Mmm, saltamontes,
has visto alguna vez a

976
00:53:59,997 --> 00:54:01,997
un chef de Sushi preparar comida?

977
00:54:04,510 --> 00:54:07,760
Ayuda, ayuda!
(Risas)

